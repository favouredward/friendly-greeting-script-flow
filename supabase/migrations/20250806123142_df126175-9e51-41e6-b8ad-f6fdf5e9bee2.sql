
-- Add payment tracking fields to applications table
ALTER TABLE applications 
ADD COLUMN payment_status text DEFAULT 'unpaid' CHECK (payment_status IN ('unpaid', 'partially_paid', 'fully_paid')),
ADD COLUMN months_paid integer DEFAULT 0,
ADD COLUMN total_amount_paid decimal DEFAULT 0;

-- Create payment_plans table
CREATE TABLE payment_plans (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  program_id integer REFERENCES programs(id),
  monthly_amount decimal NOT NULL DEFAULT 10000,
  total_duration_months integer NOT NULL DEFAULT 4,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true
);

-- Create payments table
CREATE TABLE payments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  application_id uuid REFERENCES applications(id) NOT NULL,
  amount_paid decimal NOT NULL,
  months_paid_for integer NOT NULL,
  payment_reference text UNIQUE NOT NULL,
  paystack_reference text,
  payment_status text DEFAULT 'pending' CHECK (payment_status IN ('pending', 'success', 'failed')),
  payment_date timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS on new tables
ALTER TABLE payment_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- RLS policies for payment_plans (public read for active plans)
CREATE POLICY "Anyone can view active payment plans" 
  ON payment_plans 
  FOR SELECT 
  USING (is_active = true);

-- RLS policies for payments (users can only view their own payments via email verification)
CREATE POLICY "Users can view payments for their applications" 
  ON payments 
  FOR SELECT 
  USING (
    application_id IN (
      SELECT id FROM applications 
      WHERE email = current_setting('app.current_user_email', true)
    )
  );

-- Allow public insert for payments (needed for payment processing)
CREATE POLICY "Allow payment creation" 
  ON payments 
  FOR INSERT 
  WITH CHECK (true);

-- Allow public update for payment status (needed for webhook updates)
CREATE POLICY "Allow payment status updates" 
  ON payments 
  FOR UPDATE 
  USING (true);

-- Insert default payment plan
INSERT INTO payment_plans (monthly_amount, total_duration_months, description, is_active)
VALUES (10000, 4, 'Flexible payment plan - pay monthly or in advance', true);

-- Add trigger to update applications payment status when payments change
CREATE OR REPLACE FUNCTION update_application_payment_status()
RETURNS TRIGGER AS $$
BEGIN
  -- Update the application's payment tracking
  UPDATE applications 
  SET 
    months_paid = (
      SELECT COALESCE(SUM(months_paid_for), 0) 
      FROM payments 
      WHERE application_id = NEW.application_id 
      AND payment_status = 'success'
    ),
    total_amount_paid = (
      SELECT COALESCE(SUM(amount_paid), 0) 
      FROM payments 
      WHERE application_id = NEW.application_id 
      AND payment_status = 'success'
    ),
    payment_status = CASE 
      WHEN (
        SELECT COALESCE(SUM(months_paid_for), 0) 
        FROM payments 
        WHERE application_id = NEW.application_id 
        AND payment_status = 'success'
      ) = 0 THEN 'unpaid'
      WHEN (
        SELECT COALESCE(SUM(months_paid_for), 0) 
        FROM payments 
        WHERE application_id = NEW.application_id 
        AND payment_status = 'success'
      ) >= 4 THEN 'fully_paid'
      ELSE 'partially_paid'
    END
  WHERE id = NEW.application_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for payment status updates
CREATE TRIGGER payment_status_trigger
  AFTER INSERT OR UPDATE ON payments
  FOR EACH ROW
  EXECUTE FUNCTION update_application_payment_status();

-- Add updated_at trigger to payments
CREATE TRIGGER update_payments_updated_at
  BEFORE UPDATE ON payments
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();
